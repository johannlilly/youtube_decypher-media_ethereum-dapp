# [Part 12] - Oracles and Oraclize

It might be useful to perform certain types of computation off-chain, then relay the results back onto the chain when it's done. This is where an Oracle comes in. It requires you to first call into the contract on the chain. The Oracle interacts with the outside world, then implements a callback with the contract. This may be in a different block.

## Oraclize: a third-party oracle solution

callbacks are implemented with a double underscore:

	function __callback() {} 

In our example, having a variable ID allows us to work with oraclize across separate blocks:

	string public result;
	bytes32 public oraclizeID;

	// send some ETH to oraclize to get an ID
	function flipCoin() payable {
		oraclizeID = oraclize_query("...");
	}

	// this is the function oraclize will call on our contract
	function __callback(bytes32 _oracleID, string _result) {
		result = _result;
	} 

[Oraclize docs](http://docs.oraclize.it/#ethereum-quick-start-simple-query). You can pass Oraclize a URL or JSON parsed with JavaScript. It also pairs natively with services like IPFS and WolframAlpha. 


1. Copy the code
2. Paste into Remix IDE
3. Compile
4. Copy the bytecode
5. Paste into [MyEtherWallet](https://myetherwallet.com)
6. confirm, sign, run
> connect to testnet via Infura and you can see the configuration
7. copy ABI from Remix IDE and paste into node console

	node ./decypher.js
	> var contract = web3.eth.contract() // pass abi
	> var deployed = contract.at("") // pass contract address

Now you have access to the deployed contract on the testnet. For now, it's empty. It has only been initialized.

	> deployed.result.call()
	''


Use [MyEtherWallet](https://myetherwallet.com) to interact with the contract. Pass the contract address and the ABI, then you are shown the available functions. You need to paste in the private key to unlock the wallet. Then, write the transaction. You are asked how much ETH you want to send with the contract call. You have to pass some ETH for the Oraclize service to work (see their documentation).

