# [Part 13] - How to use the Ethereum Name Service (ENS)

Resolve human-readable names to Ethereum addresses. What if you could send ETH to "decypher.eth" and the network would know how to resolve that to its corresponding address? This is like DNS for IP addresses. This is the idea of ENS. You must go through a registrar contract for this.

## types of ENS

FIFS (First In, First Served) Registrar: whoever buys first gets the domain name. But this leads to a rush to buy the most sought-after domain names, then squat on them. 

Auction Registrar minimizes squatting, forcing registants to go through this registar first.

As of this video, ENS is only deployed on Ropsten testnet. There, you register .test names. On main net, it will be .eth names.

*ethereum-ens* is the node.js library, but as of this video, there are some issues. So, use a helper file, *./ensutils.js*. It contains public ABIs and contract addresses for ENS contracts. 

## ENS namehash

When you register a name, the name is not stored, but a hash of it is.

	> ens.namehash("decypher.test")
	'0x41c59478db88a77dbb0a8bd3fad243cb6efe6a863d6383f1076c0cb8b40bad44'

Check if a name is registered by someone:

	> ens.namehash("decyphertv.test")
	'0xaa85fb1f74bdc6efe81fbc4b85e0ccfbab90c8c11f70e90ef198a51f2327ead4'
	> ens.ens.owner(ens.namehash("decyphertv.test"))
	'0x08cf02070bb9f167556c677da58e6678bbe871fc'
	> ens.ens.owner(ens.namehash("decypher.test"))
	'0xee82ddb350f48dd5712d54072172aa1a97c677c8' // ethereum address it is registered to

Try to register. ens.testRegistrar is a reference to the deployed test registrar on testnet. You can register on someone's behalf.

	> ens.testRegistrar.register("name","addr")

	> var pKey = ""
	undefined
	> var pKeyx = new Buffer(pKey, "hex")
	undefined
	> var addr = ""
	undefined
	> decypher.callContract({
	... deployed: ens.testRegistrar,
	... methodName: "register",
	... pKeyx: pKeyx,
	... fromAddress: addr
	... }, web3.sha3("decyphertv"), addr)
	true
	> TxHash...
	(hash)

Check the transaction on testnet.

	> ens.ens.owner(ens.namehash("decyphertv.test"))
	'0x08cf02070bb9f167556c677da58e6678bbe871fc'
	> addr
	'0x08cf02070bb9f167556c677da58e6678bbe871fc'

## ETH Auction registrar - a better workflow

Names can be:
- available
- up for auction
- owned

### available

Cannot be purchased like with test registrar. It can only be put up for auction.

	> ens.ethRegistrar.entries(web3.sha3("decyphertv"))[0].toNumber()
	0

- 0 indicates the name is available.
- 1 indicates up for auction
- 2 indicates purchased

// reference this later